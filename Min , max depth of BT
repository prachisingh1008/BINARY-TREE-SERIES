MIN DEPTH
class Solution{
public:
    int minDepth(Node *root) {
        if (root == NULL)
            return 0;
        
        if (root->left == NULL && root->right == NULL)
            return 1;

        int l = minDepth(root->left);
        int h = minDepth(root->right);
        
        if (l == 0)
            return h + 1;
        if (h == 0)
            return l + 1;
        
        return 1 + min(l, h);
    }
};

Given a binary tree, find its minimum depth.

Example 1:

Input:
            1
          /   \
         3     2
        /
       4           

Output: 2

Explanation:
Minimum depth is between nodes 1 and 2 since
minimum depth is defined as  the number of 
nodes along the shortest path from the root 
node down to the nearest leaf node.


MAX DEPTH
class Solution{
  public:
    /*You are required to complete this method*/
    int maxDepth(Node *root) {
        if(root==NULL)
        return 0;
        int l=maxDepth(root->left);
        int h=maxDepth(root->right);
        return 1+max(l,h);
        // Your code here
    }
};

Given a binary tree, find its maximum depth.
A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Example 1:

Input:
 root  -->     1
             /   \
            3     2
           /
          4           
Output: 3
Explanation:
Maximum depth is between nodes 1 and 4, which is 3.
